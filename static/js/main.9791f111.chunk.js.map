{"version":3,"sources":["App.styles.ts","components/Card.tsx","components/CardList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["styles","cardList","maxWidth","margin","display","gridTemplateColumns","gridGap","width","card","background","padding","textAlign","cursor","search","border","Card","monster","style","src","name","email","CardList","monsters","map","key","App","useState","setMonsters","filteredMonsters","setFilteredMonsters","useEffect","fetchData","a","fetch","json","then","console","log","type","placeholder","onChange","e","filter","toLowerCase","includes","currentTarget","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAAaA,EAAS,CACpBC,SAAU,CACRC,SAAU,KACVC,OAAQ,YACRC,QAAS,OACTC,oBAAqB,kBACrBC,QAAS,GACTC,MAAO,QAGTC,KAAM,CACJC,WAAY,OACZC,QAAS,GACTC,UAAW,SACXC,OAAQ,UACR,UAAW,CACTH,WAAY,YAIhBI,OAAQ,CACNJ,WAAY,QACZK,OAAQ,UACRX,OAAQ,YACRC,QAAS,QACTM,QAAS,GACTH,MAAO,OACPL,SAAU,KACVS,UAAW,WCdAI,EAVmB,SAAC,GAAD,IAChCC,EADgC,EAChCA,QADgC,OAG9B,yBAAKC,MAAOjB,EAAOQ,MACjB,yBAAKU,IAAG,+BAA0BF,EAAQG,KAAlC,6BACR,4BAAKH,EAAQG,MACb,2BAAIH,EAAQI,SCGHC,EAR0C,SAAC,GAAD,IACvDC,EADuD,EACvDA,SADuD,OAGrD,yBAAKL,MAAOjB,EAAOC,UAChBqB,EAASC,KAAI,SAACP,GAAD,OAAsB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQG,KAAMH,QAASA,SC6B7DS,EAjCO,WAAO,IAAD,EAEMC,mBAAoB,IAF1B,mBAEnBJ,EAFmB,KAETK,EAFS,OAGsBD,mBAAoB,IAH1C,mBAGnBE,EAHmB,KAGDC,EAHC,KAK1BC,qBAAU,WACRC,MACC,IAGH,IAIMA,EAAS,uCAAG,sBAAAC,EAAA,sEACEC,MAAM,8CADR,cAEZC,OACDC,MAAK,SAACb,GACLc,QAAQC,IAAIf,GACZK,EAAYL,GACZO,EAAoBP,MANR,2CAAH,qDAWf,OACE,6BACE,2BAAOgB,KAAK,OAAOC,YAAY,qBAAqBC,SAjBjC,SAACC,GACtBZ,EAAoBP,EAASoB,QAAO,SAAA1B,GAAO,OAAIA,EAAQG,KAAKwB,cAAcC,SAASH,EAAEI,cAAcC,MAAMH,oBAgBzB1B,MAAOjB,EAAOa,SAC5F,kBAAC,EAAD,CAAUS,SAAUM,MCrBNmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.9791f111.chunk.js","sourcesContent":["export const styles = {\r\n  cardList: {\r\n    maxWidth: 1080,\r\n    margin: \"20px auto\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"1fr 1fr 1fr 1fr\",\r\n    gridGap: 10,\r\n    width: \"100%\"\r\n  },\r\n\r\n  card: {\r\n    background: \"#fff\",\r\n    padding: 20,\r\n    textAlign: \"center\" as const,\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      background: \"#efefef\"\r\n    }\r\n  },\r\n\r\n  search: {\r\n    background: \"white\",\r\n    border: \"#efefef\",\r\n    margin: \"5% auto 0\",\r\n    display: \"block\",\r\n    padding: 20,\r\n    width: \"100%\",\r\n    maxWidth: 1040,\r\n    textAlign: \"center\" as const\r\n  }\r\n};\r\n","import React from 'react'\r\nimport { CardProps } from '../types'\r\nimport { styles } from '../App.styles'\r\n\r\nconst Card: React.FC<CardProps> = ({\r\n  monster\r\n}) => (\r\n    <div style={styles.card}>\r\n      <img src={`https://robohash.org/${monster.name}/?set=set2&size=150x150`} />\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  )\r\n\r\nexport default Card","import React from 'react'\r\nimport { Monster, CardlistProps } from '../types'\r\nimport Card from './Card'\r\nimport { styles } from '../App.styles'\r\n\r\nconst CardList: React.FunctionComponent<CardlistProps> = ({\r\n  monsters\r\n}) => (\r\n    <div style={styles.cardList}>\r\n      {monsters.map((monster: Monster) => <Card key={monster.name} monster={monster} />)}\r\n    </div>\r\n  )\r\n\r\nexport default CardList","import React, { useState, useEffect } from 'react';\nimport { Monster } from './types';\nimport CardList from './components/CardList';\nimport { styles } from './App.styles';\n\nconst App: React.FC = () => {\n\n  const [monsters, setMonsters] = useState<Monster[]>([])\n  const [filteredMonsters, setFilteredMonsters] = useState<Monster[]>([])\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n\n  const searchMonsters = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setFilteredMonsters(monsters.filter(monster => monster.name.toLowerCase().includes(e.currentTarget.value.toLowerCase())))\n  }\n\n  const fetchData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users')\n    res.json()\n      .then((monsters: Monster[]) => {\n        console.log(monsters)\n        setMonsters(monsters)\n        setFilteredMonsters(monsters)\n      })\n  }\n\n\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Enter monster name\" onChange={searchMonsters} style={styles.search} />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}